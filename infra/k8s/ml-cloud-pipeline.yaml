# PIPELINE DEFINITION
# Name: ml-cloud-pipeline
components:
  comp-arxiv-data-collection:
    executorLabel: exec-arxiv-data-collection
    inputDefinitions:
      parameters:
        max_results:
          parameterType: NUMBER_INTEGER
        query:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-docling-pdf-processing:
    executorLabel: exec-docling-pdf-processing
    inputDefinitions:
      parameters:
        device:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-embed-text-chunks:
    executorLabel: exec-embed-text-chunks
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-fine-tune-model:
    executorLabel: exec-fine-tune-model
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-generate-fine-tune-dataset:
    executorLabel: exec-generate-fine-tune-dataset
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
deploymentSpec:
  executors:
    exec-arxiv-data-collection:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - arxiv_data_collection
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef arxiv_data_collection(query: str, max_results: int) -> Dict[str,\
          \ str]:\n    \"\"\"\n    Stream PDFs from ArXiV for storage in GCS\n   \
          \ \"\"\"\n    import logging\n    from src.utils.generic_utils import GenericUtils\n\
          \    from src.data_processing.arxiv.arxiv_data_collection import ArxivDataCollection\n\
          \n    # Enable logging\n    GenericUtils().configure_component_logging(log_level=logging.INFO)\n\
          \n    # Run data collection\n    _ = ArxivDataCollection().fetch_papers(query=query,\
          \ max_results=max_results)\n    return {\"status\": \"complete\"}\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline-cpu
    exec-docling-pdf-processing:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - docling_pdf_processing
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef docling_pdf_processing(device: str) -> Dict[str, str]:\n    \"\
          \"\"\n    Process PDFs from ArXiv with Docling and store output in GCS\n\
          \    \"\"\"\n    import logging\n    from src.utils.generic_utils import\
          \ GenericUtils\n    from src.data_processing.docling.docling_pdf_processing\
          \ import DoclingPdfProcessing\n\n    # Enable logging\n    GenericUtils().configure_component_logging(log_level=logging.INFO)\n\
          \n    # Run pdf processing job\n    DoclingPdfProcessing(device=device).store_documents_in_gcs()\n\
          \    return {\"status\": \"complete\"}\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline-gpu
        resources:
          accelerator:
            resourceCount: '1'
            resourceType: nvidia.com/gpu
    exec-embed-text-chunks:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - embed_text_chunks
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef embed_text_chunks() -> Dict[str, str]:\n    \"\"\"\n    Generate\
          \ text embeddings on chunked text. Store in Qdrant vector db on GKE\n  \
          \  \"\"\"\n    import logging\n    from src.rag.vector_embeddings import\
          \ VectorEmbeddings\n    from src.utils.generic_utils import GenericUtils\n\
          \    from src.utils.yaml_parser import YamlParser\n\n    # Enable logging\n\
          \    GenericUtils().configure_component_logging(log_level=logging.INFO)\n\
          \n    # Retrieve vector db url\n    config = YamlParser(\"./config.yaml\"\
          )\n    vector_db_url = config.get_field(\"gcp.gke.services.vector_db.url\"\
          )\n\n    # Run chunking process and upsert vector embeddings\n    VectorEmbeddings(vector_db_url).upsert_vector_embeddings()\n\
          \    return {\"status\": \"complete\"}\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline-cpu
    exec-fine-tune-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - fine_tune_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef fine_tune_model() -> Dict[str, str]:\n    \"\"\"\n    Fine-tune\
          \ model\n    \"\"\"\n\n    print(\"model fine tuning\")\n    gcs_uri = \"\
          gs://fine-tuning\"\n    return {\"status\": \"complete\"}\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline-gpu
        resources:
          accelerator:
            resourceCount: '1'
            resourceType: nvidia.com/gpu
    exec-generate-fine-tune-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - generate_fine_tune_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef generate_fine_tune_dataset() -> Dict[str, str]:\n    \"\"\"\n\
          \    Generate the dataset for fine-tuning and store in GCS\n    \"\"\"\n\
          \    import logging\n    from src.utils.generic_utils import GenericUtils\n\
          \    from src.fine_tune.generate_dataset import GenerateDataset\n\n    #\
          \ Enable logging\n    GenericUtils().configure_component_logging(log_level=logging.INFO)\n\
          \n    gcs_uri = GenerateDataset().generate_docling_dataset()\n    return\
          \ {\"gcs_uri\": gcs_uri}\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline-cpu
pipelineInfo:
  name: ml-cloud-pipeline
root:
  dag:
    tasks:
      arxiv-data-collection:
        cachingOptions: {}
        componentRef:
          name: comp-arxiv-data-collection
        inputs:
          parameters:
            max_results:
              runtimeValue:
                constant: 1.0
            query:
              runtimeValue:
                constant: machine learning
        taskInfo:
          name: arxiv-data-collection
      docling-pdf-processing:
        cachingOptions: {}
        componentRef:
          name: comp-docling-pdf-processing
        dependentTasks:
        - arxiv-data-collection
        inputs:
          parameters:
            device:
              runtimeValue:
                constant: cuda
        taskInfo:
          name: docling-pdf-processing
      embed-text-chunks:
        cachingOptions: {}
        componentRef:
          name: comp-embed-text-chunks
        dependentTasks:
        - generate-fine-tune-dataset
        taskInfo:
          name: embed-text-chunks
      fine-tune-model:
        cachingOptions: {}
        componentRef:
          name: comp-fine-tune-model
        dependentTasks:
        - embed-text-chunks
        taskInfo:
          name: fine-tune-model
      generate-fine-tune-dataset:
        cachingOptions: {}
        componentRef:
          name: comp-generate-fine-tune-dataset
        dependentTasks:
        - docling-pdf-processing
        taskInfo:
          name: generate-fine-tune-dataset
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
